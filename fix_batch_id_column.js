const mysql = require('mysql2/promise');
const fs = require('fs');

// ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå config.env
const config = {};
const envContent = fs.readFileSync('config.env', 'utf8');
envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=');
    if (key && value) {
        config[key.trim()] = value.trim();
    }
});

async function fixBatchIdColumn() {
    let connection;
    
    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        connection = await mysql.createConnection({
            host: config.DB_HOST || 'localhost',
            user: config.DB_USER || 'root',
            password: config.DB_PASSWORD || '',
            database: config.DB_NAME || 'esp_tracker',
            port: config.DB_PORT || 3306
        });

        console.log('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL
        const sqlScript = fs.readFileSync('fix_batch_id_column.sql', 'utf8');
        
        // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        const statements = sqlScript.split(';').filter(stmt => stmt.trim());
        
        for (let i = 0; i < statements.length; i++) {
            const statement = statements[i].trim();
            if (statement) {
                console.log(`\n--- ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${i + 1} ---`);
                console.log(statement.substring(0, 100) + '...');
                
                try {
                    const [results] = await connection.execute(statement);
                    
                    if (results.affectedRows !== undefined) {
                        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${results.affectedRows} ‡πÅ‡∏ñ‡∏ß`);
                    } else if (Array.isArray(results)) {
                        console.log(`‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${results.length} ‡πÅ‡∏ñ‡∏ß`);
                        if (results.length > 0) {
                            console.table(results.slice(0, 5)); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
                        }
                    }
                } catch (error) {
                    console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:`, error.message);
                }
            }
        }

        console.log('\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå batch_id ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
    } finally {
        if (connection) {
            await connection.end();
            console.log('‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        }
    }
}

// ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
fixBatchIdColumn();
