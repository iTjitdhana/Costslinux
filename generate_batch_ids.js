const mysql = require('mysql2/promise');
require('dotenv').config();

// Database configurations
const currentDBConfig = {
    host: process.env.DB_HOST || '192.168.0.94',
    user: process.env.DB_USER || 'jitdhana',
    password: process.env.DB_PASSWORD || 'iT12345$',
    database: 'esp_tracker',
    charset: 'utf8mb4'
};

const oldDBConfig = {
    host: process.env.DB_HOST || '192.168.0.94',
    user: process.env.DB_USER || 'jitdhana',
    password: process.env.DB_PASSWORD || 'iT12345$',
    database: 'esp_tracker_empty',
    charset: 'utf8mb4'
};

async function mergeDatabases() {
    let currentConnection, oldConnection;
    
    try {
        console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ merge ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
        
        // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
        currentConnection = await mysql.createConnection(currentDBConfig);
        oldConnection = await mysql.createConnection(oldDBConfig);
        
        console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // 1. ‡∏´‡∏≤ work_plan_id ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô database ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const [maxWorkPlanResult] = await currentConnection.execute(
            'SELECT COALESCE(MAX(id), 0) as max_id FROM work_plans'
        );
        const maxWorkPlanId = maxWorkPlanResult[0].max_id;
        console.log(`üìä work_plan_id ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô database ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${maxWorkPlanId}`);
        
        // 2. ‡∏´‡∏≤ work_plan_id ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô database ‡πÄ‡∏Å‡πà‡∏≤
        const [maxOldWorkPlanResult] = await oldConnection.execute(
            'SELECT COALESCE(MAX(id), 0) as max_id FROM work_plans'
        );
        const maxOldWorkPlanId = maxOldWorkPlanResult[0].max_id;
        console.log(`üìä work_plan_id ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô database ‡πÄ‡∏Å‡πà‡∏≤: ${maxOldWorkPlanId}`);
        
        if (maxOldWorkPlanId === 0) {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• work_plans ‡πÉ‡∏ô database ‡πÄ‡∏Å‡πà‡∏≤');
            return;
        }
        
        // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö work_plan_id ‡πÉ‡∏´‡∏°‡πà
        const offset = maxWorkPlanId + 1000; // ‡πÄ‡∏û‡∏¥‡πà‡∏° offset ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        console.log(`üîÑ ‡πÉ‡∏ä‡πâ offset: ${offset} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö work_plan_id ‡πÉ‡∏´‡∏°‡πà`);
        
        // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• work_plans ‡∏à‡∏≤‡∏Å database ‡πÄ‡∏Å‡πà‡∏≤
        const [oldWorkPlans] = await oldConnection.execute(
            'SELECT * FROM work_plans ORDER BY id'
        );
        console.log(`üìã ‡∏û‡∏ö work_plans ‡πÉ‡∏ô database ‡πÄ‡∏Å‡πà‡∏≤: ${oldWorkPlans.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // 5. Insert work_plans ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ database ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á insert work_plans...');
        for (const workPlan of oldWorkPlans) {
            const newId = workPlan.id + offset;
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ work_plan ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ production_date ‡πÅ‡∏•‡∏∞ job_code)
            const [existingWorkPlan] = await currentConnection.execute(
                'SELECT id FROM work_plans WHERE production_date = ? AND job_code = ?',
                [workPlan.production_date, workPlan.job_code]
            );
            
            if (existingWorkPlan.length === 0) {
                // Insert work_plan ‡πÉ‡∏´‡∏°‡πà
                await currentConnection.execute(
                    `INSERT INTO work_plans (
                        id, production_date, job_code, job_name, start_time, end_time, 
                        status_id, is_special, notes, operators, machine_id, production_room_id
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                    [
                        newId, workPlan.production_date, workPlan.job_code, workPlan.job_name,
                        workPlan.start_time, workPlan.end_time, workPlan.status_id, workPlan.is_special,
                        workPlan.notes, workPlan.operators, workPlan.machine_id, workPlan.production_room_id
                    ]
                );
                console.log(`‚úÖ Insert work_plan: ${workPlan.job_code} (${workPlan.production_date}) -> ID: ${newId}`);
            } else {
                console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° work_plan ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${workPlan.job_code} (${workPlan.production_date})`);
            }
        }
        
        // 6. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• logs ‡∏à‡∏≤‡∏Å database ‡πÄ‡∏Å‡πà‡∏≤
        const [oldLogs] = await oldConnection.execute(
            'SELECT * FROM logs ORDER BY id'
        );
        console.log(`üìã ‡∏û‡∏ö logs ‡πÉ‡∏ô database ‡πÄ‡∏Å‡πà‡∏≤: ${oldLogs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // 7. Insert logs ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ database ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á insert logs...');
        for (const log of oldLogs) {
            const newWorkPlanId = log.work_plan_id + offset;
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ work_plan_id ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            const [workPlanExists] = await currentConnection.execute(
                'SELECT id FROM work_plans WHERE id = ?',
                [newWorkPlanId]
            );
            
            if (workPlanExists.length > 0) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ log ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const [existingLog] = await currentConnection.execute(
                    'SELECT id FROM logs WHERE work_plan_id = ? AND batch_id = ? AND process_number = ? AND status = ? AND timestamp = ?',
                    [newWorkPlanId, log.batch_id, log.process_number, log.status, log.timestamp]
                );
                
                if (existingLog.length === 0) {
                    // Insert log ‡πÉ‡∏´‡∏°‡πà
                    await currentConnection.execute(
                        'INSERT INTO logs (work_plan_id, batch_id, process_number, status, timestamp) VALUES (?, ?, ?, ?, ?)',
                        [newWorkPlanId, log.batch_id, log.process_number, log.status, log.timestamp]
                    );
                    console.log(`‚úÖ Insert log: work_plan_id=${newWorkPlanId}, status=${log.status}, timestamp=${log.timestamp}`);
                } else {
                    console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° log ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: work_plan_id=${newWorkPlanId}, status=${log.status}, timestamp=${log.timestamp}`);
                }
            } else {
                console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° log ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ work_plan_id ${newWorkPlanId} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
            }
        }
        
        // 8. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AUTO_INCREMENT ‡∏Ç‡∏≠‡∏á work_plans
        const newMaxId = maxWorkPlanId + offset + maxOldWorkPlanId;
        await currentConnection.execute(
            `ALTER TABLE work_plans AUTO_INCREMENT = ${newMaxId + 1}`
        );
        console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AUTO_INCREMENT ‡∏Ç‡∏≠‡∏á work_plans ‡πÄ‡∏õ‡πá‡∏ô: ${newMaxId + 1}`);
        
        // 9. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
        const [finalWorkPlanCount] = await currentConnection.execute(
            'SELECT COUNT(*) as count FROM work_plans'
        );
        const [finalLogCount] = await currentConnection.execute(
            'SELECT COUNT(*) as count FROM logs'
        );
        
        console.log('\nüìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£ merge:');
        console.log(`- work_plans ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${finalWorkPlanCount[0].count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${finalLogCount[0].count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- ‡πÉ‡∏ä‡πâ offset: ${offset}`);
        console.log('‚úÖ ‡∏Å‡∏≤‡∏£ merge ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
        throw error;
    } finally {
        if (currentConnection) {
            await currentConnection.end();
        }
        if (oldConnection) {
            await oldConnection.end();
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô merge
async function checkDataBeforeMerge() {
    let currentConnection, oldConnection;
    
    try {
        currentConnection = await mysql.createConnection(currentDBConfig);
        oldConnection = await mysql.createConnection(oldDBConfig);
        
        console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô merge...');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö work_plans
        const [currentWorkPlans] = await currentConnection.execute('SELECT COUNT(*) as count FROM work_plans');
        const [oldWorkPlans] = await oldConnection.execute('SELECT COUNT(*) as count FROM work_plans');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs
        const [currentLogs] = await currentConnection.execute('SELECT COUNT(*) as count FROM logs');
        const [oldLogs] = await oldConnection.execute('SELECT COUNT(*) as count FROM logs');
        
        console.log('\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
        console.log(`- esp_tracker: work_plans=${currentWorkPlans[0].count}, logs=${currentLogs[0].count}`);
        console.log(`- esp_tracker_empty: work_plans=${oldWorkPlans[0].count}, logs=${oldLogs[0].count}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö work_plan_id ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        const [duplicateWorkPlans] = await currentConnection.execute(`
            SELECT wp1.production_date, wp1.job_code, COUNT(*) as count
            FROM work_plans wp1
            INNER JOIN esp_tracker_empty.work_plans wp2 
            ON wp1.production_date = wp2.production_date AND wp1.job_code = wp2.job_code
            GROUP BY wp1.production_date, wp1.job_code
            HAVING COUNT(*) > 1
        `);
        
        if (duplicateWorkPlans.length > 0) {
            console.log('\n‚ö†Ô∏è ‡∏û‡∏ö work_plans ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô:');
            duplicateWorkPlans.forEach(dup => {
                console.log(`  - ${dup.job_code} (${dup.production_date}): ${dup.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            });
        } else {
            console.log('\n‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö work_plans ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô');
        }
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:', error);
    } finally {
        if (currentConnection) await currentConnection.end();
        if (oldConnection) await oldConnection.end();
    }
}

// Main execution
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--check')) {
        await checkDataBeforeMerge();
    } else if (args.includes('--merge')) {
        await mergeDatabases();
    } else {
        console.log('üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
        console.log('  node generate_batch_ids.js --check  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô merge');
        console.log('  node generate_batch_ids.js --merge  # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ merge ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = { mergeDatabases, checkDataBeforeMerge };
