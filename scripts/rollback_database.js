const mysql = require('mysql2/promise');
const fs = require('fs');
require('dotenv').config();

// Database configuration
const dbConfig = {
    host: process.env.DB_HOST || '192.168.0.94',
    user: process.env.DB_USER || 'jitdhana',
    password: process.env.DB_PASSWORD || 'iT12345$',
    database: 'esp_tracker',
    charset: 'utf8mb4'
};

async function rollbackDatabase(backupDbName = null) {
    let connection;
    
    try {
        console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ rollback ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏ backup database ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        if (!backupDbName) {
            try {
                const backupInfo = JSON.parse(fs.readFileSync('backup_info.json', 'utf8'));
                backupDbName = backupInfo.backupDatabase;
                console.log(`üìÅ ‡πÉ‡∏ä‡πâ backup database ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: ${backupDbName}`);
            } catch (error) {
                console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå backup_info.json');
                console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ backup databases ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
                await listBackups();
                console.log('\n‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ backup database:');
                console.log('   node rollback_database.js <backup_database_name>');
                return;
            }
        }
        
        connection = await mysql.createConnection(dbConfig);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backup database ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        const [backupExists] = await connection.execute(`
            SELECT SCHEMA_NAME 
            FROM information_schema.SCHEMATA 
            WHERE SCHEMA_NAME = ?
        `, [backupDbName]);
        
        if (backupExists.length === 0) {
            console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö backup database: ${backupDbName}`);
            console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ backup databases ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
            await listBackups();
            return;
        }
        
        console.log(`‚úÖ ‡∏û‡∏ö backup database: ${backupDbName}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô rollback
        console.log('\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
        const [currentWorkPlans] = await connection.execute('SELECT COUNT(*) as count FROM work_plans');
        const [currentLogs] = await connection.execute('SELECT COUNT(*) as count FROM logs');
        console.log(`- work_plans: ${currentWorkPlans[0].count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- logs: ${currentLogs[0].count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô backup
        console.log('\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô backup:');
        const [backupWorkPlans] = await connection.execute(`SELECT COUNT(*) as count FROM \`${backupDbName}\`.work_plans_backup`);
        const [backupLogs] = await connection.execute(`SELECT COUNT(*) as count FROM \`${backupDbName}\`.logs_backup`);
        console.log(`- work_plans: ${backupWorkPlans[0].count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- logs: ${backupLogs[0].count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // ‡∏´‡∏≤ work_plan_id ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô backup
        const [maxBackupId] = await connection.execute(`SELECT MAX(id) as max_id FROM \`${backupDbName}\`.work_plans_backup`);
        const maxBackupWorkPlanId = maxBackupId[0].max_id || 0;
        
        console.log(`\n‚ö†Ô∏è  ‡∏Å‡∏≤‡∏£ rollback ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ work_plan_id > ${maxBackupWorkPlanId}`);
        
        // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ rollback
        console.log('\n‚ö†Ô∏è  ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ rollback ‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N)');
        console.log('   ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: y (‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠) ‡∏´‡∏£‡∏∑‡∏≠ N (‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)');
        
        // ‡πÉ‡∏ô Node.js script ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô command line argument
        const args = process.argv.slice(2);
        if (!args.includes('--confirm')) {
            console.log('\nüí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: node rollback_database.js --confirm ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ rollback');
            return;
        }
        
        console.log('\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ rollback...');
        
        // 1. ‡∏•‡∏ö logs ‡∏ó‡∏µ‡πà‡∏°‡∏µ work_plan_id ‡πÉ‡∏´‡∏°‡πà
        console.log('üîÑ ‡∏•‡∏ö logs ‡∏ó‡∏µ‡πà‡∏°‡∏µ work_plan_id ‡πÉ‡∏´‡∏°‡πà...');
        const [deletedLogs] = await connection.execute(`
            DELETE FROM logs 
            WHERE work_plan_id > ?
        `, [maxBackupWorkPlanId]);
        console.log(`‚úÖ ‡∏•‡∏ö logs: ${deletedLogs.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // 2. ‡∏•‡∏ö work_plans ‡∏ó‡∏µ‡πà merge ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        console.log('üîÑ ‡∏•‡∏ö work_plans ‡∏ó‡∏µ‡πà merge ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤...');
        const [deletedWorkPlans] = await connection.execute(`
            DELETE FROM work_plans 
            WHERE id > ?
        `, [maxBackupWorkPlanId]);
        console.log(`‚úÖ ‡∏•‡∏ö work_plans: ${deletedWorkPlans.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // 3. ‡∏•‡∏ö finished_flags ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        console.log('üîÑ ‡∏•‡∏ö finished_flags ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á...');
        try {
            const [deletedFlags] = await connection.execute(`
                DELETE FROM finished_flags 
                WHERE work_plan_id > ?
            `, [maxBackupWorkPlanId]);
            console.log(`‚úÖ ‡∏•‡∏ö finished_flags: ${deletedFlags.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        } catch (error) {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á finished_flags');
        }
        
        // 4. ‡∏•‡∏ö work_plan_operators ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        console.log('üîÑ ‡∏•‡∏ö work_plan_operators ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á...');
        try {
            const [deletedOperators] = await connection.execute(`
                DELETE FROM work_plan_operators 
                WHERE work_plan_id > ?
            `, [maxBackupWorkPlanId]);
            console.log(`‚úÖ ‡∏•‡∏ö work_plan_operators: ${deletedOperators.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        } catch (error) {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á work_plan_operators');
        }
        
        // 5. ‡∏•‡∏ö production_batches ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        console.log('üîÑ ‡∏•‡∏ö production_batches ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á...');
        try {
            const [deletedBatches] = await connection.execute(`
                DELETE FROM production_batches 
                WHERE work_plan_id > ?
            `, [maxBackupWorkPlanId]);
            console.log(`‚úÖ ‡∏•‡∏ö production_batches: ${deletedBatches.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        } catch (error) {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á production_batches');
        }
        
        // 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AUTO_INCREMENT ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        console.log('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AUTO_INCREMENT...');
        await connection.execute(`
            ALTER TABLE work_plans AUTO_INCREMENT = ${maxBackupWorkPlanId + 1}
        `);
        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AUTO_INCREMENT ‡πÄ‡∏õ‡πá‡∏ô: ${maxBackupWorkPlanId + 1}`);
        
        // 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        console.log('\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á rollback:');
        const [finalWorkPlans] = await connection.execute('SELECT COUNT(*) as count FROM work_plans');
        const [finalLogs] = await connection.execute('SELECT COUNT(*) as count FROM logs');
        console.log(`- work_plans: ${finalWorkPlans[0].count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`- logs: ${finalLogs[0].count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // 8. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö backup
        console.log('\nüìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö backup:');
        console.log(`- work_plans: ${finalWorkPlans[0].count} vs ${backupWorkPlans[0].count}`);
        console.log(`- logs: ${finalLogs[0].count} vs ${backupLogs[0].count}`);
        
        if (finalWorkPlans[0].count === backupWorkPlans[0].count) {
            console.log('‚úÖ ‡∏Å‡∏≤‡∏£ rollback ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô work_plans ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backup');
        } else {
            console.log('‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô work_plans ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backup');
        }
        
        console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£ rollback ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ rollback:', error);
        throw error;
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ backup ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
async function listBackups() {
    let connection;
    
    try {
        connection = await mysql.createConnection({
            ...dbConfig,
            database: 'information_schema'
        });
        
        const [backups] = await connection.execute(`
            SELECT SCHEMA_NAME as database_name, 
                   CREATE_TIME as created_at
            FROM SCHEMATA 
            WHERE SCHEMA_NAME LIKE 'esp_tracker_backup_%'
            ORDER BY CREATE_TIME DESC
        `);
        
        if (backups.length === 0) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö backup databases');
        } else {
            backups.forEach((backup, index) => {
                console.log(`${index + 1}. ${backup.database_name} (${backup.created_at})`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ backup:', error);
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

// Main execution
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--list')) {
        await listBackups();
    } else if (args.includes('--help')) {
        console.log('üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô rollback_database.js:');
        console.log('  node rollback_database.js                    # Rollback ‡πÉ‡∏ä‡πâ backup ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î');
        console.log('  node rollback_database.js <backup_db_name>   # Rollback ‡πÉ‡∏ä‡πâ backup ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
        console.log('  node rollback_database.js --confirm         # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ rollback');
        console.log('  node rollback_database.js --list            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ backup');
        console.log('  node rollback_database.js --help            # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    } else {
        // ‡∏´‡∏≤ backup database name ‡∏à‡∏≤‡∏Å arguments
        const backupDbName = args.find(arg => !arg.startsWith('--'));
        await rollbackDatabase(backupDbName);
    }
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = { rollbackDatabase, listBackups };
