import React, { useEffect, useState } from 'react';
import { useForm, useFieldArray } from 'react-hook-form';
import toast from 'react-hot-toast';
import { batchAPI, materialAPI, formatCurrency, formatNumber } from '../services/api';
import { Plus, Search, X, Clipboard } from 'lucide-react';

const MaterialWeighing = () => {
	const { register, handleSubmit, control, reset, watch, setValue } = useForm({
		defaultValues: {
			batch_id: '',
			fg_code: '',
			materials: []
		}
	});
	const { fields, replace, append, remove } = useFieldArray({ control, name: 'materials' });

	const [batches, setBatches] = useState([]);
	const [loading, setLoading] = useState(false);
	const [saving, setSaving] = useState(false);
	const [showAddMaterial, setShowAddMaterial] = useState(false);
	const [searchQuery, setSearchQuery] = useState('');
	const [searchResults, setSearchResults] = useState([]);
	const [searching, setSearching] = useState(false);
	const [dataSource, setDataSource] = useState(''); // 'existing' ‡∏´‡∏£‡∏∑‡∏≠ 'bom'
	const [showHelpModal, setShowHelpModal] = useState(false);
	const [showManualInputModal, setShowManualInputModal] = useState(false);
	const [manualInputText, setManualInputText] = useState('');
	const [newMaterial, setNewMaterial] = useState({
		Mat_Id: '',
		Mat_Name: '',
		Mat_Unit: '‡∏Å‡∏Å.',
		price: 0
	});
	
	const batchId = watch('batch_id');
	const fgCode = watch('fg_code');

	const loadBatches = async () => {
		try {
			const res = await batchAPI.getAll();
			setBatches(res.data.data || []);
		} catch (error) {
			console.error('Error loading batches:', error);
			toast.error('‡πÇ‡∏´‡∏•‡∏î‡∏•‡πá‡∏≠‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
		}
	};

	const loadBOM = async () => {
		try {
			if (!fgCode) {
				toast.error('‡∏Å‡∏£‡∏≠‡∏Å FG Code ‡∏Å‡πà‡∏≠‡∏ô');
				return;
			}
			setLoading(true);
			const res = await materialAPI.getBOM(fgCode);
			const bom = (res.data.data || []).map((item) => ({
				material_id: item.material_id,
				planned_qty: Number(item.Raw_Qty),
				actual_qty: '', // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏á
				unit: item.Mat_Unit,
				unit_price: item.price,
				weighed_by: null,
				Mat_Name: item.Mat_Name,
				is_custom: false
			}));
			replace(bom);
			setDataSource('bom');
			toast.success('‡πÇ‡∏´‡∏•‡∏î BOM ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
		} catch (error) {
			console.error('Error loading BOM:', error);
			toast.error('‡πÇ‡∏´‡∏•‡∏î BOM ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
		} finally {
			setLoading(false);
		}
	};

	// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
	const loadExistingWeighing = async (batchId) => {
		try {
			if (!batchId) return;
			
			setLoading(true);
			const res = await materialAPI.getUsage(batchId);
			const existingData = res.data.data || [];
			
			if (existingData.length > 0) {
				// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á form
				const materials = existingData.map((item) => ({
					material_id: item.material_id,
					planned_qty: Number(item.planned_qty) || 0,
					actual_qty: String(item.actual_qty || ''),
					unit: item.unit || '‡∏Å‡∏Å.',
					unit_price: Number(item.unit_price) || 0,
					weighed_by: item.weighed_by,
					Mat_Name: item.Mat_Name,
					is_custom: false
				}));
				
				replace(materials);
				setDataSource('existing');
				toast.success('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
			} else {
				// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î BOM ‡πÅ‡∏ó‡∏ô
				const batch = batches.find(b => b.id == batchId);
				if (batch) {
					setValue('fg_code', batch.fg_code);
					await loadBOM();
				}
			}
		} catch (error) {
			console.error('Error loading existing weighing:', error);
			toast.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
		} finally {
			setLoading(false);
		}
	};

	// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏´‡∏°‡πà
	useEffect(() => {
		if (batchId) {
			loadExistingWeighing(batchId);
		}
	}, [batchId]);

	useEffect(() => { loadBatches(); }, []);

	const searchMaterials = async (query) => {
		if (!query.trim()) {
			setSearchResults([]);
			return;
		}
		try {
			setSearching(true);
			const res = await materialAPI.search(query);
			setSearchResults(res.data.data || []);
		} catch (error) {
			console.error('Error searching materials:', error);
			toast.error('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
		} finally {
			setSearching(false);
		}
	};

	const addExistingMaterial = (material) => {
		const newMaterialItem = {
			material_id: material.id,
			planned_qty: 0,
			actual_qty: '',
			unit: material.Mat_Unit || '‡∏Å‡∏Å.',
			unit_price: material.price || 0,
			weighed_by: null,
			Mat_Name: material.Mat_Name,
			is_custom: false
		};
		append(newMaterialItem);
		setShowAddMaterial(false);
		setSearchQuery('');
		setSearchResults([]);
		toast.success(`‡πÄ‡∏û‡∏¥‡πà‡∏° ${material.Mat_Name} ‡πÅ‡∏•‡πâ‡∏ß`);
	};

	const addCustomMaterial = () => {
		if (!newMaterial.Mat_Name.trim()) {
			toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö');
			return;
		}
		
		const customMaterial = {
			material_id: null, // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
			planned_qty: 0,
			actual_qty: '',
			unit: newMaterial.Mat_Unit,
			unit_price: Number(newMaterial.price) || 0,
			weighed_by: null,
			Mat_Name: newMaterial.Mat_Name,
			Mat_Id: newMaterial.Mat_Id,
			is_custom: true
		};
		
		append(customMaterial);
		setShowAddMaterial(false);
		setNewMaterial({
			Mat_Id: '',
			Mat_Name: '',
			Mat_Unit: '‡∏Å‡∏Å.',
			price: 0
		});
		toast.success(`‡πÄ‡∏û‡∏¥‡πà‡∏° ${newMaterial.Mat_Name} ‡πÅ‡∏•‡πâ‡∏ß`);
	};

	const round3 = (val) => {
		const n = parseFloat(val || '0');
		return Math.round(n * 1000) / 1000;
	};

	const onSave = async (values) => {
		try {
			if (!values.batch_id || !values.materials?.length) {
				toast.error('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Å‡πà‡∏≠‡∏ô (‡πÇ‡∏´‡∏•‡∏î BOM ‡∏´‡∏£‡∏∑‡∏≠ Import ‡∏à‡∏≤‡∏Å Clipboard)');
				return;
			}
			setSaving(true);
			
			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
			const existingData = await materialAPI.getUsage(values.batch_id);
			const hasExistingData = existingData.data.data && existingData.data.data.length > 0;
			
			// ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà
			const existingMaterials = values.materials.filter(m => !m.is_custom);
			const newMaterials = values.materials.filter(m => m.is_custom);
			
			// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô
			const createdMaterials = [];
			for (const material of newMaterials) {
				try {
					const materialData = {
						Mat_Id: material.Mat_Id || `CUSTOM_${Date.now()}`,
						Mat_Name: material.Mat_Name,
						Mat_Unit: material.unit,
						price: Number(material.unit_price) || 0
					};
					const res = await materialAPI.create(materialData);
					createdMaterials.push({
						...material,
						material_id: res.data.data.id
					});
				} catch (error) {
					console.error('Error creating material:', error);
					toast.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ${material.Mat_Name} ‡πÑ‡∏î‡πâ`);
				}
			}
			
			// ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
			const allMaterials = [
				...existingMaterials,
				...createdMaterials
			];
			
			const payload = {
				batch_id: Number(values.batch_id),
				materials: allMaterials.map((m) => ({
					material_id: Number(m.material_id),
					planned_qty: round3(m.planned_qty),
					actual_qty: round3(m.actual_qty),
					unit: m.unit,
					unit_price: Number(m.unit_price || 0),
					weighed_by: m.weighed_by ? Number(m.weighed_by) : null
				})),
				is_update: hasExistingData // ‡∏™‡πà‡∏á flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
			};
			
			await materialAPI.recordWeighing(payload);
			toast.success(hasExistingData ? '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
		} catch (error) {
			console.error('Error saving material weighing:', error);
			toast.error(error.response?.data?.error || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
		} finally {
			setSaving(false);
		}
	};

	const totalQty = (watch('materials') || []).reduce((s, m) => s + (parseFloat(m.actual_qty) || 0), 0);
	const totalCost = (watch('materials') || []).reduce((s, m) => s + (parseFloat(m.actual_qty) || 0) * Number(m.unit_price || 0), 0);

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Import ‡∏à‡∏≤‡∏Å Clipboard
	const handleImportFromClipboard = async () => {
		try {
			let text = '';
			
			// ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Clipboard API ‡πÉ‡∏´‡∏°‡πà
			if (navigator.clipboard && navigator.clipboard.readText) {
				try {
					text = await navigator.clipboard.readText();
					console.log('‚úÖ Successfully read from clipboard API');
				} catch (clipboardError) {
					console.warn('‚ö†Ô∏è Clipboard API failed:', clipboardError);
					// ‡∏ñ‡πâ‡∏≤ Clipboard API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ fallback method
					text = await fallbackClipboardRead();
				}
			} else {
				console.log('‚ö†Ô∏è Clipboard API not available, using fallback');
				text = await fallbackClipboardRead();
			}

			if (!text.trim()) {
				// ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Manual Input
				openManualInputModal();
				return;
			}

			// Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Copy ‡∏°‡∏≤
			console.log('üìã Raw clipboard data:', text);
			console.log('üìè Data length:', text.length);
			console.log('üîç First 500 characters:', text.substring(0, 500));

			const materials = parseClipboardData(text);
			if (materials.length === 0) {
							// ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Manual Input
			toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Manual Input ‡πÅ‡∏ó‡∏ô');
			openManualInputModal();
			return;
			}

			// ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
			const { matchedMaterials, unmatchedMaterials } = await matchMaterialsWithDatabase(materials);
			
			// ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (matched + unmatched)
			const allMaterials = [...matchedMaterials, ...unmatchedMaterials];
			
			// ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å Clipboard
			allMaterials.sort((a, b) => (a.clipboard_index || 0) - (b.clipboard_index || 0));

			// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
			replace(allMaterials);
			setDataSource('clipboard');
			
			// ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
			const successCount = matchedMaterials.length;
			const newMaterialCount = unmatchedMaterials.length;
			
			if (newMaterialCount > 0) {
				toast.success(`Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏û‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ${newMaterialCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
			} else {
				toast.success(`Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${allMaterials.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß)`);
			}
		} catch (error) {
			console.error('‚ùå Error importing from clipboard:', error);
			toast.error('Import ‡∏à‡∏≤‡∏Å Clipboard ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Manual Input ‡πÅ‡∏ó‡∏ô');
			openManualInputModal();
		}
	};

	// Fallback method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô Clipboard
	const fallbackClipboardRead = () => {
		return new Promise((resolve, reject) => {
			// ‡∏™‡∏£‡πâ‡∏≤‡∏á textarea ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
			const textarea = document.createElement('textarea');
			textarea.style.position = 'fixed';
			textarea.style.left = '-9999px';
			textarea.style.top = '-9999px';
			document.body.appendChild(textarea);
			
			// Focus ‡πÅ‡∏•‡∏∞ paste
			textarea.focus();
			document.execCommand('paste');
			
			const text = textarea.value;
			document.body.removeChild(textarea);
			
			if (text) {
				resolve(text);
			} else {
				reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Clipboard ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß'));
			}
		});
	};

	// ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Clipboard
	const showClipboardHelp = () => {
		setShowHelpModal(true);
	};

	// ‡πÅ‡∏™‡∏î‡∏á Manual Input Modal
	const openManualInputModal = () => {
		setShowManualInputModal(true);
	};

	// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Manual Input
	const handleManualInput = async () => {
		try {
			if (!manualInputText.trim()) {
				toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
				return;
			}

			console.log('üìã Manual input data:', manualInputText);
			const materials = parseClipboardData(manualInputText);
			
			if (materials.length === 0) {
				toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
				return;
			}

			// ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
			const { matchedMaterials, unmatchedMaterials } = await matchMaterialsWithDatabase(materials);
			
			// ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
			const allMaterials = [...matchedMaterials, ...unmatchedMaterials];
			allMaterials.sort((a, b) => (a.clipboard_index || 0) - (b.clipboard_index || 0));

			// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
			replace(allMaterials);
			setDataSource('manual');
			setShowManualInputModal(false);
			setManualInputText('');
			
			// ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
			const successCount = matchedMaterials.length;
			const unmatchedCount = unmatchedMaterials.length;
			
			if (unmatchedCount > 0) {
				toast.success(`Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${unmatchedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
			} else {
				toast.success(`Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${allMaterials.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
			}
		} catch (error) {
			console.error('‚ùå Error processing manual input:', error);
			toast.error('‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + error.message);
		}
	};

	// Parse ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Clipboard
	const parseClipboardData = (text) => {
		// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà \r\n ‡πÅ‡∏•‡∏∞ \r ‡∏î‡πâ‡∏ß‡∏¢ \n ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
		const normalizedText = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
		
		// ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ï‡∏≤‡∏° \n
		const lines = normalizedText.split('\n');
		const materials = [];
		let lineIndex = 0;

		console.log('Parsing clipboard data...');
		console.log('Total lines:', lines.length);

		for (let i = 0; i < lines.length; i++) {
			const line = lines[i].trim();
			if (!line) continue;

			const columns = line.split('\t');
			const colsTrim = columns.map(c => (c || '').trim());
			
			console.log(`Line ${i}:`, colsTrim);

			// ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß Header
			if (i === 0 && (colsTrim[0] === '‡∏•‡∏≥‡∏î‡∏±‡∏ö' || colsTrim[0] === 'Order')) {
				console.log('Skipping header row');
				continue;
			}

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏°‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞ Type)
			if (colsTrim.length >= 5 && /^\d+$/.test(colsTrim[0]) && (colsTrim[1] === 'I' || colsTrim[1] === 'O')) {
				console.log(`Processing line ${i} as material`);
				
				// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
				const orderNumber = parseInt(colsTrim[0]) || 0;
				const type = colsTrim[1]; // I = FG, O = ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
				const materialCode = colsTrim[4] || ''; // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
				const materialName = colsTrim[5] || ''; // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
				const plannedQty = parseFloat(colsTrim[6]) || 0; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
				const actualQty = parseFloat(colsTrim[7]) || plannedQty; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô)
				const unit = colsTrim[8] || '‡∏Å‡∏Å.'; // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏ç‡πà
				const pricePerUnit = parseFloat(colsTrim[14]) || 0; // ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢

				console.log(`Parsed: Code=${materialCode}, Name=${materialName}, Type=${type}, Planned=${plannedQty}, Actual=${actualQty}, Unit=${unit}, Price=${pricePerUnit}`);

				// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Type O)
				if (materialName && materialCode && type === 'O') {
					materials.push({
						material_id: null,
						planned_qty: plannedQty,
						actual_qty: String(actualQty),
						unit,
						unit_price: pricePerUnit,
						weighed_by: null,
						Mat_Name: materialName,
						Mat_Id: materialCode,
						is_custom: false,
						clipboard_index: lineIndex
					});
					lineIndex++;
					console.log(`Added material: ${materialName}, Qty: ${actualQty} ${unit}`);
				}
			}
		}

		console.log('Total materials found:', materials.length);
		return materials;
	};

	// ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
	const matchMaterialsWithDatabase = async (materials) => {
		const matchedMaterials = [];
		const unmatchedMaterials = [];

		for (const material of materials) {
			try {
				// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
				const searchQueries = [
					material.Mat_Id,
					material.Mat_Name
				].filter(q => q && q.trim());

				let matched = null;
				
				for (const query of searchQueries) {
					try {
						const res = await materialAPI.search(query);
						const foundMaterials = res.data.data || [];

						// ‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
						matched = foundMaterials.find(m => 
							m.Mat_Id === material.Mat_Id || 
							m.Mat_Id.toLowerCase() === material.Mat_Id.toLowerCase() ||
							m.Mat_Name.toLowerCase().includes(material.Mat_Name.toLowerCase()) ||
							material.Mat_Name.toLowerCase().includes(m.Mat_Name.toLowerCase())
						);
						
						if (matched) break;
					} catch (searchError) {
						console.warn(`Search failed for query: ${query}`, searchError);
					}
				}

				if (matched) {
					matchedMaterials.push({
						...material,
						material_id: matched.id,
						Mat_Name: matched.Mat_Name,
						// ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Clipboard ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏¢ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
						unit: material.unit || matched.Mat_Unit || '‡∏Å‡∏Å.',
						unit_price: (material.unit_price && Number(material.unit_price) > 0)
							? material.unit_price
							: (matched.price || 0),
						is_custom: false
					});
				} else {
					// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö
					console.log(`Material not found in database: ${material.Mat_Id} - ${material.Mat_Name}, creating as custom material`);
					unmatchedMaterials.push({
						...material,
						material_id: null, // ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô database
						is_custom: true, // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà
						Mat_Id: material.Mat_Id || `AUTO_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
						Mat_Name: material.Mat_Name || '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà',
						unit: material.unit || '‡∏Å‡∏Å.',
						unit_price: material.unit_price || 0
					});
				}
			} catch (error) {
				console.error(`Error matching material ${material.Mat_Id}:`, error);
				// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà
				unmatchedMaterials.push({
					...material,
					material_id: null,
					is_custom: true,
					Mat_Id: material.Mat_Id || `ERROR_${Date.now()}`,
					Mat_Name: material.Mat_Name || '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà',
					unit: material.unit || '‡∏Å‡∏Å.',
					unit_price: material.unit_price || 0
				});
			}
		}

		return { matchedMaterials, unmatchedMaterials };
	};

	return (
		<div className="space-y-6">
			<div className="card">
				<div className="card-header">
					<h2 className="text-lg font-semibold text-gray-900">‡∏ï‡∏ß‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h2>
				</div>
				<div className="card-body space-y-4">
					<div className="grid grid-cols-1 md:grid-cols-4 gap-4">
						<div>
							<label className="block text-sm text-gray-700 mb-1">‡∏•‡πá‡∏≠‡∏ï</label>
							<select className="input" {...register('batch_id')}>
								<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡πá‡∏≠‡∏ï --</option>
								{batches.map((b) => (
									<option key={b.id} value={b.id}>{b.batch_code} ({b.fg_code})</option>
								))}
							</select>
						</div>
						<div>
							<label className="block text-sm text-gray-700 mb-1">FG Code (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î BOM)</label>
							<input type="text" className="input" placeholder="‡πÄ‡∏ä‡πà‡∏ô FG0001" {...register('fg_code')} />
						</div>
						<div className="flex items-end gap-2">
							<button type="button" className="btn btn-secondary" onClick={loadBOM} disabled={loading}>
								{loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : '‡πÇ‡∏´‡∏•‡∏î BOM'}
							</button>
							<button 
								type="button" 
								className="btn btn-primary flex items-center gap-2" 
								onClick={() => setShowAddMaterial(true)}
							>
								<Plus size={16} />
								‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
							</button>
							<button 
								type="button" 
								className="btn btn-accent flex items-center gap-2" 
								onClick={handleImportFromClipboard}
								title="Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Clipboard (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ BOM)"
							>
								<Clipboard size={16} />
								Import Clipboard
							</button>
							<button
								type="button"
								onClick={() => showClipboardHelp()}
								className="btn btn-outline flex items-center gap-2"
								title="‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ Import Clipboard"
							>
								?
							</button>
						</div>
					</div>

					{/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
					{dataSource && (
						<div className="flex items-center gap-2 p-3 bg-gray-50 rounded-lg">
							<div className={`w-3 h-3 rounded-full ${
								dataSource === 'existing' ? 'bg-green-500' : 
								dataSource === 'clipboard' ? 'bg-purple-500' : 'bg-blue-500'
							}`}></div>
							<span className="text-sm text-gray-700">
								{dataSource === 'existing' && '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)'}
								{dataSource === 'bom' && '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å BOM (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)'}
								{dataSource === 'clipboard' && '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Clipboard (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)'}
							</span>
						</div>
					)}

					{/* Modal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö */}
					{showAddMaterial && (
						<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
							<div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[80vh] overflow-y-auto">
								<div className="flex justify-between items-center mb-4">
									<h3 className="text-lg font-semibold">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h3>
									<button 
										onClick={() => setShowAddMaterial(false)}
										className="text-gray-500 hover:text-gray-700"
									>
										<X size={20} />
									</button>
								</div>
								
								{/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà */}
								<div className="mb-6">
									<h4 className="font-medium mb-2">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà</h4>
									<div className="flex gap-2 mb-3">
										<div className="flex-1 relative">
											<Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
											<input
												type="text"
												className="input pl-10"
												placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö..."
												value={searchQuery}
												onChange={(e) => {
													setSearchQuery(e.target.value);
													searchMaterials(e.target.value);
												}}
											/>
										</div>
									</div>
									
									{searching && <p className="text-sm text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...</p>}
									
									{searchResults.length > 0 && (
										<div className="border rounded-lg max-h-40 overflow-y-auto">
											{searchResults.map((material) => (
												<div
													key={material.id}
													className="p-3 border-b hover:bg-gray-50 cursor-pointer"
													onClick={() => addExistingMaterial(material)}
												>
													<div className="font-medium">{material.Mat_Name}</div>
													<div className="text-sm text-gray-600">
														‡∏£‡∏´‡∏±‡∏™: {material.Mat_Id} | ‡∏´‡∏ô‡πà‡∏ß‡∏¢: {material.Mat_Unit} | ‡∏£‡∏≤‡∏Ñ‡∏≤: {formatCurrency(material.price || 0)}
													</div>
												</div>
											))}
										</div>
									)}
								</div>
								
								{/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà */}
								<div>
									<h4 className="font-medium mb-2">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà</h4>
									<div className="grid grid-cols-2 gap-4">
										<div>
											<label className="block text-sm text-gray-700 mb-1">‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</label>
											<input
												type="text"
												className="input"
												placeholder="‡πÄ‡∏ä‡πà‡∏ô MAT001"
												value={newMaterial.Mat_Id}
												onChange={(e) => setNewMaterial(prev => ({ ...prev, Mat_Id: e.target.value }))}
											/>
										</div>
										<div>
											<label className="block text-sm text-gray-700 mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö *</label>
											<input
												type="text"
												className="input"
												placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"
												value={newMaterial.Mat_Name}
												onChange={(e) => setNewMaterial(prev => ({ ...prev, Mat_Name: e.target.value }))}
											/>
										</div>
										<div>
											<label className="block text-sm text-gray-700 mb-1">‡∏´‡∏ô‡πà‡∏ß‡∏¢</label>
											<select
												className="input"
												value={newMaterial.Mat_Unit}
												onChange={(e) => setNewMaterial(prev => ({ ...prev, Mat_Unit: e.target.value }))}
											>
												<option value="‡∏Å‡∏Å.">‡∏Å‡∏Å.</option>
												<option value="‡∏Å‡∏£‡∏±‡∏°">‡∏Å‡∏£‡∏±‡∏°</option>
												<option value="‡∏•‡∏¥‡∏ï‡∏£">‡∏•‡∏¥‡∏ï‡∏£</option>
												<option value="‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£">‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£</option>
												<option value="‡∏ä‡∏¥‡πâ‡∏ô">‡∏ä‡∏¥‡πâ‡∏ô</option>
												<option value="‡∏ñ‡∏∏‡∏á">‡∏ñ‡∏∏‡∏á</option>
												<option value="‡∏Ç‡∏ß‡∏î">‡∏Ç‡∏ß‡∏î</option>
											</select>
										</div>
										<div>
											<label className="block text-sm text-gray-700 mb-1">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢</label>
											<input
												type="number"
												step="0.01"
												className="input"
												placeholder="0.00"
												value={newMaterial.price}
												onChange={(e) => setNewMaterial(prev => ({ ...prev, price: e.target.value }))}
											/>
										</div>
									</div>
									<div className="mt-4">
										<button
											type="button"
											className="btn btn-primary"
											onClick={addCustomMaterial}
										>
											‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà
										</button>
									</div>
								</div>
							</div>
						</div>
					)}

					<div className="overflow-x-auto">
						<table className="table">
							<thead>
								<tr>
									<th>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</th>
									<th>‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£</th>
									<th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏£‡∏¥‡∏á</th>
									<th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
									<th>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
									<th>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤</th>
									<th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
								</tr>
							</thead>
							<tbody>
								{fields.map((field, idx) => (
									<tr key={field.id}>
										<td>
											{field.Mat_Name || '-'}
											{field.is_custom && (
												<span className="ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
													‡πÉ‡∏´‡∏°‡πà
												</span>
											)}
										</td>
										<td>{formatNumber(field.planned_qty, 3)}</td>
										<td>
											<input type="number" step="0.001" className="input" placeholder={String(formatNumber(field.planned_qty, 3))}
												{...register(`materials.${idx}.actual_qty`)} />
											<input type="hidden" {...register(`materials.${idx}.material_id`)} />
											<input type="hidden" {...register(`materials.${idx}.is_custom`)} />
										</td>
										<td>
											<input type="text" className="input" {...register(`materials.${idx}.unit`)} />
										</td>
										<td>
											<input type="number" step="0.01" className="input" {...register(`materials.${idx}.unit_price`)} />
										</td>
										<td className="font-medium">
											{formatCurrency(round3(watch(`materials.${idx}.actual_qty`) || 0) * Number(watch(`materials.${idx}.unit_price`) || 0))}
										</td>
										<td>
											<button
												type="button"
												className="text-red-600 hover:text-red-800"
												onClick={() => remove(idx)}
											>
												<X size={16} />
											</button>
										</td>
									</tr>
								))}
							</tbody>
						</table>
					</div>

					<div className="flex items-center justify-between">
						<div className="text-sm text-gray-700">
							‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: <span className="font-semibold">{formatNumber(totalQty, 3)}</span>
							&nbsp;|&nbsp; ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏£‡∏ß‡∏°: <span className="font-semibold">{formatCurrency(totalCost)}</span>
						</div>
						<button className="btn btn-primary" onClick={handleSubmit(onSave)} disabled={saving || !batchId || fields.length === 0}>
							{saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á'}
						</button>
					</div>
				</div>
			</div>

			{/* Manual Input Modal */}
			{showManualInputModal && (
				<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
					<div className="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[80vh] overflow-y-auto">
						<div className="flex justify-between items-center mb-4">
							<h2 className="text-xl font-semibold">Manual Input - ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á</h2>
							<button
								onClick={() => setShowManualInputModal(false)}
								className="text-gray-500 hover:text-gray-700"
							>
								<X size={24} />
							</button>
						</div>

						<div className="space-y-4">
							<div className="bg-blue-50 p-4 rounded-lg">
								<h3 className="font-semibold text-blue-800 mb-2">üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:</h3>
								<ol className="list-decimal list-inside space-y-2 text-sm">
									<li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel (Ctrl+C)</li>
									<li>‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (Ctrl+V)</li>
									<li>‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"</li>
									<li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á</li>
								</ol>
							</div>

							<div className="bg-yellow-50 p-4 rounded-lg">
								<h3 className="font-semibold text-yellow-800 mb-2">‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:</h3>
								<div className="text-sm">
									<p className="mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Tab):</p>
									<code className="bg-gray-100 p-2 rounded text-xs block">
										‡∏•‡∏≥‡∏î‡∏±‡∏ö	Type	‡πÄ‡∏•‡∏∑‡∏≠‡∏Å	‡∏•‡∏ö	‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤	‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤	‡∏à‡∏≥‡∏ô‡∏ß‡∏ô	‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å	‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏ç‡πà	%	‡∏Ñ‡πà‡∏≤‡πÅ‡∏õ‡∏•‡∏á	‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢	‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å	‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å	‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢	‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
									</code>
								</div>
							</div>

							<div>
								<label className="block text-sm font-medium text-gray-700 mb-2">
									‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Clipboard (‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà):
								</label>
								<textarea
									value={manualInputText}
									onChange={(e) => setManualInputText(e.target.value)}
									className="w-full h-48 p-3 border border-gray-300 rounded-lg resize-none"
									placeholder="‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
								/>
							</div>
						</div>

						<div className="flex justify-end gap-3 mt-6">
							<button
								onClick={() => setShowManualInputModal(false)}
								className="btn btn-secondary"
							>
								‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
							</button>
							<button
								onClick={handleManualInput}
								className="btn btn-primary"
							>
								‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
							</button>
						</div>
					</div>
				</div>
			)}

			{/* Help Modal */}
			{showHelpModal && (
				<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
					<div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
						<div className="flex justify-between items-center mb-4">
							<h2 className="text-xl font-semibold">‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ Import Clipboard</h2>
							<button
								onClick={() => setShowHelpModal(false)}
								className="text-gray-500 hover:text-gray-700"
							>
								<X size={24} />
							</button>
						</div>

						<div className="space-y-4">
							<div className="bg-blue-50 p-4 rounded-lg">
								<h3 className="font-semibold text-blue-800 mb-2">üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
								<ol className="list-decimal list-inside space-y-2 text-sm">
									<li>‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</li>
									<li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (Ctrl+A ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)</li>
									<li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Ctrl+C)</li>
									<li>‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "Import Clipboard"</li>
									<li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á</li>
									<li>‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏ß‡∏á" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</li>
								</ol>
							</div>

							<div className="bg-yellow-50 p-4 rounded-lg">
								<h3 className="font-semibold text-yellow-800 mb-2">‚ö†Ô∏è ‡∏´‡∏≤‡∏Å Import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</h3>
								<ul className="list-disc list-inside space-y-1 text-sm">
									<li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß</li>
									<li>‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Ctrl+V ‡πÉ‡∏ô Notepad ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
									<li>‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ HTTPS ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ browser ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï Clipboard access</li>
									<li>‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ã‡πâ‡∏≥</li>
									<li><strong>‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Manual Input Modal ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á</li>
								</ul>
							</div>

							<div className="bg-green-50 p-4 rounded-lg">
								<h3 className="font-semibold text-green-800 mb-2">‚úÖ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:</h3>
								<ul className="list-disc list-inside space-y-1 text-sm">
									<li>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel ‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤ (Tab-separated)</li>
									<li>‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Type = 'O' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</li>
									<li>‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å</li>
									<li>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
								</ul>
							</div>

							<div className="bg-purple-50 p-4 rounded-lg">
								<h3 className="font-semibold text-purple-800 mb-2">üîß ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:</h3>
								<ul className="list-disc list-inside space-y-1 text-sm">
									<li><strong>Clipboard API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ fallback method ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
									<li><strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á:</strong> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console (F12) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π error</li>
									<li><strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î:</strong> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Excel</li>
									<li><strong>Browser ‡πÄ‡∏Å‡πà‡∏≤:</strong> ‡πÉ‡∏ä‡πâ Chrome, Firefox, Edge ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà</li>
								</ul>
							</div>
						</div>

						<div className="flex justify-end mt-6">
							<button
								onClick={() => setShowHelpModal(false)}
								className="btn btn-primary"
							>
								‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß
							</button>
						</div>
					</div>
				</div>
			)}
		</div>
	);
};

export default MaterialWeighing;
